version: '3.8'

services:
  # PostgreSQL Database - Production Ready
  postgres:
    image: postgres:15-alpine
    container_name: erp-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: erp_merchandiser
      POSTGRES_USER: erp_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-erp_secure_2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init:/docker-entrypoint-initdb.d
    networks:
      - erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_admin -d erp_merchandiser"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache - Production Ready
  redis:
    image: redis:7-alpine
    container_name: erp-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_2024!} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Prisma Studio - Database Management UI
  prisma-studio:
    image: node:18-alpine
    container_name: erp-prisma-studio
    restart: unless-stopped
    working_dir: /app
    command: sh -c "npm install -g prisma && npx prisma studio --port 5555 --hostname 0.0.0.0"
    ports:
      - "${PRISMA_STUDIO_PORT:-5555}:5555"
    volumes:
      - ./prisma:/app/prisma
      - ./.env:/app/.env
    networks:
      - erp-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://erp_admin:${POSTGRES_PASSWORD:-erp_secure_2024!}@postgres:5432/erp_merchandiser

  # ERP Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: erp-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5001
      DATABASE_URL: postgresql://erp_admin:${POSTGRES_PASSWORD:-erp_secure_2024!}@postgres:5432/erp_merchandiser
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_2024!}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_2024}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "${BACKEND_PORT:-5001}:5001"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - erp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ERP Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: erp-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://localhost:${BACKEND_PORT:-5001}
      REACT_APP_WS_URL: ws://localhost:${BACKEND_PORT:-5001}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - erp-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: erp-nginx-prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - erp-network
    depends_on:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  erp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16